package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	graph_model "github.com/wwwshwww/graphql-sandbox/graph/model"
	user_mysql "github.com/wwwshwww/graphql-sandbox/internal/adapter/outbound/user/mysql"
	domain_user "github.com/wwwshwww/graphql-sandbox/internal/domain/user"
	"github.com/wwwshwww/graphql-sandbox/internal/usecase/user"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input graph_model.NewLink) (*graph_model.Link, error) {
	// * implemented
	user := graph_model.User{Name: "test"}
	return &graph_model.Link{
		Title:   input.Title,
		Address: input.Address,
		User:    &user,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graph_model.NewUser) (string, error) {
	// * implemented
	ur := user_mysql.New(r.DB)
	uuc := user.New(ur)

	userID, err := ur.NextIdentifier()
	if err != nil {
		return "", err
	}
	if err := uuc.Save(userID, domain_user.UserPreferences{
		Name:     input.Username,
		Password: input.Password,
	}); err != nil {
		return "", err
	}

	return "ok", nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input graph_model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input graph_model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*graph_model.Link, error) {
	// * implemented
	var links []*graph_model.Link
	dummyLink := graph_model.Link{
		Title:   "our dummy link",
		Address: "https://address.org",
		User:    &graph_model.User{Name: "admin"},
	}
	links = append(links, &dummyLink)
	return links, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*graph_model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
